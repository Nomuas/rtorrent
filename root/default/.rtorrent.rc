#############################################################################
# A minimal rTorrent configuration that provides the basic features
# you want to have in addition to the built-in defaults.
#
# See https://github.com/rakshasa/rtorrent/wiki/CONFIG-Template
# for an up-to-date version.
#############################################################################

# Instance layout (base paths)
method.insert = cfg.basedir,    private|const|string, (cat,"/config/")
method.insert = cfg.watch,      private|const|string, (cat,(cfg.basedir),"watch/")
method.insert = cfg.logs,       private|const|string, (cat,(cfg.basedir),"log/")
method.insert = cfg.logfile,    private|const|string, (cat,(cfg.logs),"rtorrent-",(system.time),".log")
method.insert = cfg.download,   private|const|string, (cat,"/downloads/")

# Basic operational settings (no need to change these)
session.path.set = (cat,(cfg.basedir),".session/")
directory.default.set = (cat,(cfg.download))

#Move completed to directory based on label name
method.insert = d.get_finished_dir, simple, "cat=(cat,(cfg.download)),$d.custom1="
method.insert = d.get_data_full_path, simple, "branch=((d.is_multi_file)),((cat,(d.directory))),((cat,(d.directory),/,(d.name)))"
method.insert = d.move_to_complete, simple, "d.directory.set=$argument.1=; execute=mkdir,-p,$argument.1=; execute=mv,-u,$argument.0=,$argument.1=; d.save_full_session="
method.set_key = event.download.finished,move_complete,"d.move_to_complete=$d.get_data_full_path=,$d.get_finished_dir="

# And don't check hash when finished 
check_hash = no

# Watch directories (add more as you like, but use unique schedule names)
schedule = watch_start,5,5,((load.start,(cat,(cfg.watch),"start/*.torrent")))
schedule = watch_load,5,5,((load.normal,(cat,(cfg.watch),"load/*.torrent")))

# Save all the sessions in every 12 hours instead of the default 20 minutes.
schedule2 = session_save, 1200, 43200, ((session.save))

schedule = untied_directory,5,5,((stop_untied,(cat,(cfg.watch),"start/*.torrent")))
schedule = low_diskspace,5,60,close_low_diskspace=1024M

# Listening port for incoming peer traffic (fixed; you can also randomize it)
network.port_range.set = 31891-31891
network.port_random.set = no

# Tracker-less torrent and UDP tracker support
# (conservative settings for 'private' trackers, change for 'public')
dht.mode.set = disable
protocol.pex.set = no
trackers.use_udp.set = yes
encryption = allow_incoming,try_outgoing,require,require_RC4

# General settings
encoding_list = UTF-8
system.umask.set = 002

# Peer settings
throttle.global_down.max_rate.set_kb = 280000
throttle.global_up.max_rate.set_kb   = 280000
throttle.max_downloads.global.set = 400
throttle.max_uploads.global.set   = 400
throttle.min_peers.normal.set = 99
throttle.max_peers.normal.set = 100
throttle.min_peers.seed.set = -1
throttle.max_peers.seed.set = -1
throttle.max_downloads.set = 50
throttle.max_uploads.set = 50
trackers.numwant.set = 100

# Limits for file handle resources, this is optimized for
# an `ulimit` of 1024 (a common default). You MUST leave
# a ceiling of handles reserved for rTorrent's internal needs!
network.http.max_open.set = 99
network.max_open_files.set = 600
network.max_open_sockets.set = 999

# Memory resource usage (increase if you have a large number of items loaded,
# and/or the available resources to spend)
pieces.memory.max.set = 2048M
#network.receive_buffer.size.set =  4M
#network.send_buffer.size.set = 12M
network.xmlrpc.size_limit.set = 2M

# Preloading a piece of a file. Default: `0` Possible values: `0` (Off) , `1` (Madvise) , `2` (Direct paging).
pieces.preload.type.set = 2
#pieces.preload.min_size.set = 262144
#pieces.preload.min_rate.set = 5120

# CURL options to add support for nonofficial SSL trackers and peers
#network.http.ssl_verify_host.set = 0
network.http.ssl_verify_peer.set = 0

# CURL option to lower DNS timeout. Default: `60`.
network.http.dns_cache_timeout.set = 25

# Logging:
#   Levels = critical error warn notice info debug
#   Groups = connection_* dht_* peer_* rpc_* storage_* thread_* tracker_* torrent_*
print = (cat,"Logging to ",(cfg.logfile))
log.open_file = "log", (cfg.logfile)
log.add_output = "info", "log"
#log.add_output = "tracker_debug", "log"

# Prepare rtorrent communication socket
execute.nothrow = rm,/run/rtorrent/.rtorrent.sock
network.scgi.open_local = /run/rtorrent/.rtorrent.sock
schedule = socket_chmod,0,0,"execute=chmod,0666,/run/rtorrent/.rtorrent.sock"

### END of rtorrent.rc ###
